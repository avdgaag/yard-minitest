{"name":"Yard-minitest","tagline":"Include Minitest test case descriptions in your class documentation.","body":"# YARD::Minitest\r\n\r\nParse Minitest files to read all the test case descriptions and include those\r\nwith the relevant classes in your YARD documentation. This works for both\r\nActiveSupport-style `test` blocks and regular old `def test_` methods. Test\r\ncases get listed at the bottom of your class documentation and include the\r\ntest source code, file name and line numbers.\r\n\r\n**This is very much a toy project to play with YARD plugins.** If you find it\r\nuseful then pull requests are welcome.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'yard-minitest'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install yard-minitest\r\n\r\n## Usage\r\n\r\nYARD::Minitest is a YARD plugin, so you can activate it explicitly when you run\r\n`yardoc`:\r\n\r\n    $ yardoc --plugin minitest\r\n\r\nAlternatively, you can have YARD always look for any installed plugin by setting\r\nits `load_plugins` configuration:\r\n\r\n    $ yard config load_plugins true\r\n\r\nRemember to include your test files when documenting your project; otherwise\r\nyour tests will not be found.\r\n\r\n    $ yardoc app/**/*.rb test/**/*.rb\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/avdgaag/yard-minitest/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n","google":"UA-20357800-1","note":"Don't delete this file! It's used internally to help with page regeneration."}